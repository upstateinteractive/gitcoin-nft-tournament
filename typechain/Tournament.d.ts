/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TournamentInterface extends ethers.utils.Interface {
  functions: {
    "createTournament(address[8],address[8],uint256[8])": FunctionFragment;
    "endCurrentRound(uint256,uint256[])": FunctionFragment;
    "endTournament(uint256,uint256[])": FunctionFragment;
    "getBracketWinners(uint256)": FunctionFragment;
    "getCurrentBalances(uint256)": FunctionFragment;
    "getCurrentRound(uint256)": FunctionFragment;
    "getTokenAddresses(uint256)": FunctionFragment;
    "getTokenIds(uint256)": FunctionFragment;
    "getWallets(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createTournament",
    values: [
      [string, string, string, string, string, string, string, string],
      [string, string, string, string, string, string, string, string],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endCurrentRound",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "endTournament",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBracketWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWallets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBracketWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;

  events: {
    "RoundEnded(uint256,uint256,uint8[8])": EventFragment;
    "TournamentCreated(uint256)": EventFragment;
    "TournamentEnded(uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoundEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TournamentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TournamentEnded"): EventFragment;
}

export class Tournament extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TournamentInterface;

  functions: {
    createTournament(
      _playerWallets: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenAddresses: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenIds: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endCurrentRound(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTournament(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBracketWinners(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number, number, number, number, number, number]]
    >;

    getCurrentBalances(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    getCurrentRound(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAddresses(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string, string, string, string, string, string]]
    >;

    getTokenIds(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    getWallets(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string, string, string, string, string, string]]
    >;
  };

  createTournament(
    _playerWallets: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ],
    _tokenAddresses: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ],
    _tokenIds: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endCurrentRound(
    _tournamentId: BigNumberish,
    _roundResults: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTournament(
    _tournamentId: BigNumberish,
    _roundResults: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBracketWinners(
    _tournamentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number, number, number, number, number]>;

  getCurrentBalances(
    _tournamentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getCurrentRound(
    _tournamentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAddresses(
    _tournamentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string, string]>;

  getTokenIds(
    _tournamentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getWallets(
    _tournamentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string, string]>;

  callStatic: {
    createTournament(
      _playerWallets: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenAddresses: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenIds: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    endCurrentRound(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    endTournament(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBracketWinners(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number, number, number]
    >;

    getCurrentBalances(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getCurrentRound(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddresses(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string]
    >;

    getTokenIds(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getWallets(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string]
    >;
  };

  filters: {
    RoundEnded(
      tournamentId?: BigNumberish | null,
      round?: BigNumberish | null,
      bracketWinners?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        [number, number, number, number, number, number, number, number]
      ],
      {
        tournamentId: BigNumber;
        round: BigNumber;
        bracketWinners: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
      }
    >;

    TournamentCreated(
      tournamentId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tournamentId: BigNumber }>;

    TournamentEnded(
      tournamentId?: BigNumberish | null,
      bracketWinner?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, number],
      { tournamentId: BigNumber; bracketWinner: number }
    >;
  };

  estimateGas: {
    createTournament(
      _playerWallets: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenAddresses: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenIds: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endCurrentRound(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTournament(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBracketWinners(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBalances(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRound(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddresses(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIds(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallets(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTournament(
      _playerWallets: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenAddresses: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      _tokenIds: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endCurrentRound(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTournament(
      _tournamentId: BigNumberish,
      _roundResults: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBracketWinners(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBalances(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRound(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddresses(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIds(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallets(
      _tournamentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
